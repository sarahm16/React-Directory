{"version":3,"sources":["components/employeeList.js","components/renderTable.js","components/sort.js","components/departmentsArray.js","components/dropdown.js","components/title.js","components/employeeContainer.js","App.js","serviceWorker.js","index.js"],"names":["employeeList","id","name","email","role","department","Table","props","state","employees","console","log","this","map","employee","index","key","renderTableData","Component","compare","a","b","nameA","toUpperCase","nameB","comparison","RenderArray","item","array","i","length","indexOf","push","Dropdown","list","className","data-toggle","aria-labelledby","value","onClick","handleFilterBtn","Title","class","EmployeeContainer","handleSortBtn","setState","sort","event","target","filtered","filter","e","includes","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e56026dc.chunk.js","sourcesContent":["let employeeList =  [\n    { id: 1, name: 'Mark', email: 'mark@email.com', role: 'Lead Engineer', department: 'Engineering' },\n    { id: 2, name: 'Ali', email: 'ali@email.com', role: 'Manager', department: 'Sales' },\n    { id: 3, name: 'Jonathon', email: 'jonathon@email.com', role: 'Manager', department: 'Engineering' },\n    { id: 4, name: 'Jared', email: 'jared@email.com', role: 'Manager', department: 'HR' },\n    { id: 5, name: 'Sarah', email: 'sarah@email.com', role: 'Recruiter', department: 'HR'},\n    { id: 6, name: 'Mike', email: 'mike@email.com', role: 'Manager', department: 'Legal'},\n    { id: 7, name: 'Chris', email: 'chris@email.com', role: 'Lawyer', department: 'Legal'},\n    { id: 8, name: 'Britney', email: 'britney@email.com', role: 'Software Engineer', department: 'Engineering'},\n    { id: 9, name: 'Josh', email: 'josh@email.com', role: 'Sales Lead', department: 'Sales'},\n    { id: 10, name: 'Kyle', email: 'kyle@email.com', role: 'Recruiter', department: 'HR'},\n\n]\n\nexport default employeeList;","import React, {Component} from 'react';\nimport './styles.css';\n\n    class Table extends Component {\n        constructor(props) {\n            super(props) //since we are extending class Table so we have to use super in order to override Component class constructor\n            this.state = {\n               employees: props.employees\n           };\n        }\n    \n        renderTableData() {\n            console.log('rendering')\n            return this.state.employees.map((employee, index) => {\n               const { id, name, email, role, department } = employee //destructuring\n               return (\n                  <tr key={id}>\n                     <td>{name}</td>\n                     <td>{email}</td>\n                     <td>{role}</td>\n                     <td>{department}</td>\n                  </tr>\n               )\n            })\n        }\n    \n        render() {\n            return (\n               <div>\n                  <hr />\n                  <table id='employees'>\n                     <thead id='table-header'>\n                        <td>Name</td>\n                        <td>Email</td>\n                        <td>Role</td>\n                        <td>Department</td>\n                     </thead>\n                     <tbody>\n                        {this.renderTableData()}\n                     </tbody>\n                  </table>\n               </div>\n            )\n        }\n    }\n\nexport default Table;","function compare(a, b) {\n    // Use toUpperCase() to ignore character casing\n    const nameA = a.name.toUpperCase();\n    const nameB = b.name.toUpperCase();\n\n    let comparison = 0;\n    if (nameA > nameB) {\n        comparison = 1;\n    } else if (nameA < nameB) {\n        comparison = -1;\n    }\n    return comparison;\n}\n\nexport default compare;","import employeeList from './employeeList';\n\n//puts all unique departments into an array\nfunction RenderArray(item) {\n    let array=[];\n    for(let i=0; i<employeeList.length; i++) {\n        if(array.indexOf(employeeList[i][item]) === -1) {\n            array.push(employeeList[i][item])\n        }\n    }\n    return array;\n}\n\nexport default RenderArray;","import React from 'react';\nimport RenderArray from './departmentsArray';\nimport './styles.css';\n\nfunction Dropdown(props) {\n    let array = RenderArray(props.list);\n    return (\n        <div className=\"dropdown\">\n            <button className=\"btn btn-secondary dropdown-toggle\" data-toggle=\"dropdown\">\n                Filter by {props.list}\n            </button>\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                {array.map(item => (\n                    <button value={item} name={props.list} className='dropdown-item' onClick={props.handleFilterBtn}>{item}</button>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Dropdown;","import React from 'react'\nimport './styles.css'\n\nfunction Title() {\n    return(\n        <div id='header'>\n            <h1>Employee Roster</h1>\n            <i class=\"fas fa-globe-americas\"></i>\n        </div>\n    )\n}\n\nexport default Title;","import React, { Component } from 'react';\nimport employeeList from './employeeList';\nimport Table from './renderTable';\nimport compare from './sort';\nimport Dropdown from './dropdown';\nimport Title from './title';\n\nclass EmployeeContainer extends Component {\n    state = {\n        employees: employeeList\n    }\n\n    // componentDidMount() {\n    //     console.log(employeeList)\n    //     this.setState({\n    //         employees: employeeList\n    //     })\n    // }\n\n    handleSortBtn = () => {\n        this.setState({\n            employees: employeeList.sort(compare)\n        })\n    }\n\n    handleFilterBtn = event => {\n        let item = event.target.value;\n        let filtered = employeeList.filter(e => e[event.target.name].includes(item));\n        for(let i=0; i<filtered.length; i++) {\n            employeeList[i] = filtered[i]\n        }\n        employeeList.splice(filtered.length, employeeList.length-filtered.length)\n\n        this.setState({})\n    }\n\n    render() {\n        return(\n            <div>\n                <Title />\n                <Table employees={this.state.employees} />\n                <div className='buttons'>\n                    <button onClick={this.handleSortBtn} className='btn btn-secondary'>Sort A-Z</button>\n                    <Dropdown list='department' handleFilterBtn={this.handleFilterBtn}/>\n                    <Dropdown list='role' handleFilterBtn={this.handleFilterBtn}/>\n                </div>        \n            </div>\n        )\n    }\n}\n\nexport default EmployeeContainer;","import React from 'react';\nimport EmployeeContainer from './components/employeeContainer';\n\nfunction App() {\n  return (\n    <EmployeeContainer />\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}